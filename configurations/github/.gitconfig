[alias]
    po = push -u origin HEAD
    feat = "!f() { git add . && git commit -m \"feat: $1\"; }; f"
    chore = "!f() { git add . && git commit -m \"chore: $1\"; }; f"
    fix = "!f() { git add . && git commit -m \"fix: $1\"; }; f"
    
    ; lola = log --graph --pretty='format:%C(auto)%h %d %s %C(green)%an%C(bold blue) %ad' --all --date=relative
    ; lol = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    ; oops = !f(){ if [ "$1" == '' ]; then   git commit --amend --no-edit; else   git commit --amend "$@"; fi;}; f
    ; fop = fetch origin --prune
    ; pp = pull --prune
    ; pfnov = push -f --no-verify
    ; pnov = push --no-verify
    ; wip-branch = for-each-ref --sort='authordate:iso8601' --format=' %(color:green)%(authordate:relative)%09%(color:white)%(refname:short)' refs/heads
    ; co = checkout
    ; cob = checkout -b
    ; br = branch
    ; ci = commit
    ; st = status
    ; mas = rebase main
    ; unstage = reset HEAD --
    ; sp = switch -
    ; fp = !git fetch -p; git pull
    ; wip = !git add --all; git ci -m WIP
    ; unwip = !git reset --soft HEAD~1; git unstage
    ; prunel = !git branch --merged | grep -v "\*" | grep -v main | xargs -n 1 git branch -d
    ; ri = !sh -c 'git rebase -i HEAD~$(git rev-list --count $(git branch -rl "*/HEAD" | rev | cut -d/ -f1 | rev)..HEAD)'
    ; changelog = !f() { git log --topo-order --no-merges --pretty=format:"%s (%an)" $1..HEAD; }; f
