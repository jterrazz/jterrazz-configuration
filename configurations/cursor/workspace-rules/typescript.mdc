---
description: Type-safe, readable and maintainable TypeScript ‚Äì import order, naming, compiler flags, error-handling & Zod patterns.
globs: **/*.ts,**/*.tsx
alwaysApply: false
---

# üè∑Ô∏è TypeScript Standards

These rules codify how every TypeScript codebase should be structured so that code remains **type-safe, readable, and maintainable**.

> "Make invalid states unrepresentable ‚Äì use the type system to prevent bugs." ‚Äì Rule #0

---

## 1. Import Order & Syntax

1. **External packages** ‚Üí blank line ‚Üí **`@/*` aliases** ‚Üí blank line ‚Üí **relative imports**.
2. Use **type-only** imports: `import type { X } from "‚Ä¶"`.
3. Relative imports **always** end with `.js` extension (ESM output friendly).
4. ‚ö†Ô∏è **Auto-fix warning** ‚Äì our linter deletes **unused** imports on save. If you add imports _before_ the code that uses them, they will be wiped. ‚Üí Write the code first, then add the import to avoid churn.

```ts
import { z } from "zod";
import type { Context } from "hono";

import { type ArticleRepositoryPort } from "@/application/ports/outbound/persistence/article-repository.port.js";

import { Category } from "./category.vo.js";
```

---

## 2. Compiler Flags

| Flag                          | Value |
| ----------------------------- | :---: |
| `strict`                      |  ‚úÖ   |
| `noImplicitReturns`           |  ‚úÖ   |
| `noUnusedLocals / Parameters` |  ‚úÖ   |
| `exactOptionalPropertyTypes`  |  ‚úÖ   |
| `noUncheckedIndexedAccess`    |  ‚úÖ   |

Keep `tsconfig.json` minimal ‚Äì extend from a shared base and override **only when justified**.

---

## 3. Naming Conventions

| Kind             | Example                                  |
| ---------------- | ---------------------------------------- |
| Interface / Type | `UserProfile`                            |
| Class            | `WorldNewsAdapter`, `GetArticlesUseCase` |
| Enum             | `StatusEnum`                             |
| Constant         | `API_BASE_URL`, `RATE_LIMIT_DELAY`       |
| Zod schema var   | `categorySchema`                         |
| Port interface   | `ArticleRepositoryPort`                  |

---

## 4. Code Style Guidelines

‚Ä¢ **Explicit return types** for every exported function / method.
‚Ä¢ Max **3 parameters** ‚Äì otherwise use an options object.
‚Ä¢ Prefer **arrow functions** for class properties.
‚Ä¢ Always mark injected deps `private readonly`.
‚Ä¢ Early returns + guard clauses; avoid deep nesting.
‚Ä¢ Class member order: public props ‚Üí private props ‚Üí constructor ‚Üí public methods ‚Üí private methods.

---

## 5. Error Handling Pattern

- Distinguish **expected** vs **unexpected** errors with dedicated classes.
- Value objects use `schema.safeParse` and throw descriptive errors.
- Use typed `Result<E, T>` return values for expected errors.
- Unexpected errors should be thrown and captured by framework-level error boundaries.

---

## 6. Domain Modelling with Zod

### Value Object Example

```ts
export const categorySchema = z
  .enum(["TECH", "BUSINESS", "POLITICS"])
  .describe("Article category");
export type CategoryEnum = z.infer<typeof categorySchema>;

export class Category {
  constructor(private readonly value: CategoryEnum) {}
  toString() {
    return this.value;
  }
  static create(raw: string): Category {
    const res = categorySchema.safeParse(raw);
    if (!res.success) throw new Error(`Invalid category: ${raw}`);
    return new Category(res.data);
  }
}
```

- Schemas live **above** classes/types and are exported with `as const`.
- Always export the inferred type: `export type X = z.infer<typeof xSchema>`.

---

## 7. Async Patterns

- Prefer `async/await`; never chain `.then()`.
- Use `Promise.all([...])` for parallel I/O.
- Async functions have explicit return types: `Promise<T>`.
- Fail fast: validate input early, short-circuit when possible.

---

## 8. Configuration Objects

- Use explicit interfaces (`WorldNewsAdapterConfig`).
- Validate at bootstrap with Zod.
- Keep config separate from business logic.

---

## 9. Documentation

- JSDoc on public APIs explaining **why**, not **how**.
- Ports & adapters receive `@description` block for clarity.
- Inline comments only where code is non-obvious.

---

## 10. Best Practices

- ‚úÖ **DO** respect import order & use `.js` extensions
- ‚úÖ **DO** enable strict compiler flags
- ‚úÖ **DO** follow naming table conventions
- ‚úÖ **DO** use early returns over nested `if`s
- ‚úÖ **DO** validate Zod schemas at boundaries
- ‚úÖ **DO** provide descriptive error messages
- ‚úÖ **DO** fully type & document public APIs

- ‚ùå **DON'T** use more than 3 function parameters
- ‚ùå **DON'T** mix expected and unexpected error handling
- ‚ùå **DON'T** skip type annotations on exported functions
